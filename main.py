import logging
import asyncio
import httpx
import torch
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from bot.handlers import setup_handlers
from utils.logger import configure_logging
from config import Config
from utils.cache import cache  # –î–æ–¥–∞–Ω–æ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É

# –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤
httpx_logger = logging.getLogger("httpx")
httpx_logger.setLevel(logging.WARNING)

def main() -> None:
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    configure_logging()
    logger = logging.getLogger(__name__)  # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Crypto Analysis Bot")
    logger.info(f"PyTorch version: {torch.__version__}")
    logger.info(f"CUDA available: {torch.cuda.is_available()}")

    if torch.cuda.is_available():
        logger.info(f"üéÆ GPU devices: {torch.cuda.device_count()}")
        logger.info(f"üéÆ Current device: {torch.cuda.current_device()}")
        logger.info(f"üéÆ Device name: {torch.cuda.get_device_name(0)}")
    else:
        logger.warning("‚ö†Ô∏è No GPU available, using CPU")
    
    # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    cache.clear()
    logger.info("üßπ –ö–µ—à –æ—á–∏—â–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É")
    
    try:
        application = Application.builder().token(Config.TELEGRAM_TOKEN).build()
        
        # –í–∏–¥–∞–ª–µ–Ω–æ —Ä—É—á–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é JobQueue
        setup_handlers(application)
        logger.info("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–π—à–æ–≤ —É —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )
    except Exception as e:
        logger.critical(f"‚õî –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    asyncio.run(main())